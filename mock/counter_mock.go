// Code generated by MockGen. DO NOT EDIT.
// Source: counter.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCounter is a mock of Counter interface
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Increment mocks base method
func (m *MockCounter) Increment(metric string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Increment", metric)
}

// Increment indicates an expected call of Increment
func (mr *MockCounterMockRecorder) Increment(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockCounter)(nil).Increment), metric)
}

// Stats mocks base method
func (m *MockCounter) Stats(metrics ...string) map[string]uint32 {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stats", varargs...)
	ret0, _ := ret[0].(map[string]uint32)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockCounterMockRecorder) Stats(metrics ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockCounter)(nil).Stats), metrics...)
}

// Reset mocks base method
func (m *MockCounter) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset
func (mr *MockCounterMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCounter)(nil).Reset))
}
