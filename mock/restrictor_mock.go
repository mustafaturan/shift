// Code generated by MockGen. DO NOT EDIT.
// Source: restrictor.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRestrictor is a mock of Restrictor interface
type MockRestrictor struct {
	ctrl     *gomock.Controller
	recorder *MockRestrictorMockRecorder
}

// MockRestrictorMockRecorder is the mock recorder for MockRestrictor
type MockRestrictorMockRecorder struct {
	mock *MockRestrictor
}

// NewMockRestrictor creates a new mock instance
func NewMockRestrictor(ctrl *gomock.Controller) *MockRestrictor {
	mock := &MockRestrictor{ctrl: ctrl}
	mock.recorder = &MockRestrictorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestrictor) EXPECT() *MockRestrictorMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockRestrictor) Check(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockRestrictorMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockRestrictor)(nil).Check), arg0)
}

// Defer mocks base method
func (m *MockRestrictor) Defer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Defer")
}

// Defer indicates an expected call of Defer
func (mr *MockRestrictorMockRecorder) Defer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Defer", reflect.TypeOf((*MockRestrictor)(nil).Defer))
}
